<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clearsky0601&#39;s Blog</title>
  
  <subtitle>Song Chenglin</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-17T13:06:13.714Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Song Chenglin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/02/17/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6/"/>
    <id>http://example.com/2022/02/17/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6/</id>
    <published>2022-02-17T13:06:13.714Z</published>
    <updated>2022-02-17T13:06:13.714Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/02/17/%E5%88%9D%E4%B8%AD%E6%95%B0%E5%AD%A6/"/>
    <id>http://example.com/2022/02/17/%E5%88%9D%E4%B8%AD%E6%95%B0%E5%AD%A6/</id>
    <published>2022-02-17T13:05:36.798Z</published>
    <updated>2022-02-17T14:12:26.640Z</updated>
    
    <content type="html"><![CDATA[<hr><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络知识入门</title>
    <link href="http://example.com/2022/02/05/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/02/05/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8/</id>
    <published>2022-02-05T05:13:11.000Z</published>
    <updated>2022-02-05T06:17:09.483Z</updated>
    
    <content type="html"><![CDATA[<p>什么是以太网？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是以太网？&lt;/p&gt;
</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="基础知识" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="入门" scheme="http://example.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSS</title>
    <link href="http://example.com/2022/01/16/CSS/"/>
    <id>http://example.com/2022/01/16/CSS/</id>
    <published>2022-01-16T07:51:48.000Z</published>
    <updated>2022-01-16T07:51:48.885Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="http://example.com/2022/01/16/HTML/"/>
    <id>http://example.com/2022/01/16/HTML/</id>
    <published>2022-01-16T07:51:39.000Z</published>
    <updated>2022-01-16T07:51:39.246Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>爬虫</title>
    <link href="http://example.com/2022/01/16/%E7%88%AC%E8%99%AB/"/>
    <id>http://example.com/2022/01/16/%E7%88%AC%E8%99%AB/</id>
    <published>2022-01-16T07:45:37.000Z</published>
    <updated>2022-01-16T07:48:19.654Z</updated>
    
    <content type="html"><![CDATA[<p>学习路线：<a href="https://zhuanlan.zhihu.com/p/190256722">https://zhuanlan.zhihu.com/p/190256722</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习路线：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/190256722&quot;&gt;https://zhuanlan.zhihu.com/p/190256722&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hadoop入门</title>
    <link href="http://example.com/2022/01/16/Hadoop%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/01/16/Hadoop%E5%85%A5%E9%97%A8/</id>
    <published>2022-01-16T07:44:51.000Z</published>
    <updated>2022-01-16T07:44:51.307Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Java基础复习</title>
    <link href="http://example.com/2022/01/16/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2022/01/16/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-01-16T07:44:32.000Z</published>
    <updated>2022-01-16T07:44:32.496Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL基础复习</title>
    <link href="http://example.com/2022/01/16/MySql%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2022/01/16/MySql%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-01-16T07:22:57.000Z</published>
    <updated>2022-01-24T16:11:38.542Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考资料：</strong></p><p>小白教程：<a href="http://www.voidme.com/mysql">http://www.voidme.com/mysql</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MySQL 是最流行的<strong>关系型数据库管理系统</strong>，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</p><p><strong>👉关系型数据库与非关系型数据库：</strong></p><blockquote><table><thead><tr><th></th><th>关系型数据库</th><th>非关系型数据库</th></tr></thead><tbody><tr><td>代表</td><td>Mysql, SQL Server，Oracle,PostgreSQL</td><td>HBASE，MongoDB，Redis、CouchDB</td></tr><tr><td>数据组织方式</td><td>关系模型(二维表格模型）</td><td>非关系型、键值</td></tr><tr><td>优点</td><td>容易理解，贴近现实世界；<br />操作方便，便于维护</td><td>有极高的并发读写性能<br />海量的数据库快速的查询数据<br />解决了传统数据库的扩展性上的缺陷</td></tr><tr><td>缺点</td><td>海量数据时的读写效率低<br /></td><td>不提供sql支持，学习和使用成本较高<br /><br />无事务处理，附加功能bi和报表等支持也不好</td></tr></tbody></table><p>参考博客：<a href="https://blog.csdn.net/cr_lzy/article/details/94961460">https://blog.csdn.net/cr_lzy/article/details/94961460</a></p></blockquote><p><strong>👉MySQL与sql的关系</strong></p><blockquote><p><strong>SQL是一种结构化查询语言，mysql是一个关系型数据库管理系统。</strong></p></blockquote><p>可视化工具：</p><ul><li>navicat</li><li>phpmyadmin</li><li>MySQL Workbench （官方出品）</li></ul><p>SQL 包含以下 4 部分：</p><ol><li>数据定义语言（DDL）：DROP、CREATE、ALTER 等语句。</li><li>数据操作语言（DML）：INSERT（插入）、UPDATE（修改）、DELETE（删除）语句。</li><li>数据查询语言（DQL）：SELECT 语句。</li><li>数据控制语言（DCL）:  GRANT、REVOKE、COMMIT、ROLLBACK 等语句。</li></ol><h1 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h1><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[root@host]# mysql -u root -pEnter password:******<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>MySQL 不允许在同一系统下创建两个相同名称的数据库！</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p> <strong>CREATE DATABASE</strong> 语句</p><p>语法格式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE [IF NOT EXISTS] &lt;数据库名&gt;[[DEFAULT] CHARACTER SET &lt;字符集名&gt;] [[DEFAULT] COLLATE &lt;校对规则名&gt;];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明：</p><blockquote><p><code>[ ]</code>中的内容是可选的。语法说明如下：</p><ul><li>&lt;数据库名&gt;：创建数据库的名称。MySQL 的数据存储区将以目录方式表示 MySQL 数据库，因此数据库名称必须符合操作系统的文件夹命名规则，<strong>不能以数字开头</strong>，尽量要有实际意义。<strong>注意在 MySQL 中不区分大小写。</strong></li><li>IF NOT EXISTS：在创建数据库之前进行判断，只有该数据库目前尚不存在时才能执行操作。此选项可以用来避免数据库已经存在而重复创建的错误。</li><li>[DEFAULT] CHARACTER SET：指定数据库的<strong>字符集</strong>。指定字符集的目的是为了避免在数据库中存储的数据出现乱码的情况。如果在创建数据库时不指定字符集，那么就使用系统的默认字符集。</li><li>[DEFAULT] COLLATE：指定<strong>字符集的默认校对规则</strong>。</li></ul></blockquote><p>注意：MySQL 的字符集（CHARACTER）和校对规则（COLLATION）是两个不同的概念。字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式。</p><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE IF NOT EXISTS test_db_char  -&gt; DEFAULT CHARACTER SET utf8  -&gt; DEFAULT COLLATE utf8_chinese_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个测试数据库，命名为 test_db_char，指定其默认字符集为 utf8，默认校对规则为 utf8_chinese_ci（简体中文，不区分大小写）</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p><strong>USE</strong> 语句</p><p>当用 CREATE DATABASE 语句创建数据库之后，该数据库不会自动成为当前数据库，需要用 USE 来指定当前数据库。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">USE &lt;数据库名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该语句可以通知 MySQL 把 <code>&lt;数据库名&gt;</code>所指示的数据库作为当前数据库。该数据库保持为默认数据库，直到语段的结尾，或者直到遇见一个不同的 USE 语句。</p><p>只有使用 USE 语句来指定某个数据库作为当前数据库之后，才能对该数据库及其存储的数据对象执行操作。</p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p> <strong>SHOW DATABASES</strong> 语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW DATABASES [LIKE &#39;数据库名&#39;];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>LIKE 从句是可选项，用于匹配指定的数据库名称。LIKE 从句<u>可以部分匹配，也可以完全匹配</u>。</li><li>数据库名由单引号<code>&#39; &#39;</code>包围。</li></ul><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p> <strong>ALTER DATABASE</strong> 语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER DATABASE [数据库名] &#123; [ DEFAULT ] CHARACTER SET &lt;字符集名&gt; |[ DEFAULT ] COLLATE &lt;校对规则名&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>ALTER DATABASE 用于更改数据库的<u>全局特性</u>。</li><li>使用 ALTER DATABASE <u>需要</u>获得数据库 ALTER <u>权限</u>。</li><li>数据库名称可以忽略，此时语句对应于默认数据库。</li><li>CHARACTER SET 子句用于更改默认的数据库字符集。</li></ul></blockquote><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p> <strong>DROP DATABASE</strong> 语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP DATABASE [ IF EXISTS ] &lt;数据库名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>&lt;数据库名&gt;：指定要删除的数据库名。</li><li>IF EXISTS：用于防止当数据库不存在时发生错误。</li><li>DROP DATABASE：删除数据库中的所有表格并同时删除数据库。使用此语句时要非常小心，以免错误删除。如果要使用 DROP DATABASE，需要获得数据库 DROP 权限。</li></ul></blockquote><p>​    注意：MySQL 安装后，系统会自动创建名为 information_schema 和 mysql 的两个系统数据库，系统数据库存放一些和数据库相关的信息，如果删除了这两个数据库，MySQL 将不能正常工作。</p><p>存储引擎    </p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>MySQL 的数据类型有大概可以分为 4 种，分别是<u>整数类型、浮点数类型和定点数类型</u>、日期和时间类型、字符串类型、二进制类型等。</p><blockquote><p>注意：整数类型和浮点数类型可以统称为数值数据类型。</p></blockquote><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>整数类型包括 TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，浮点数类型包括 FLOAT 和 DOUBLE，定点数类型为 DECIMAL。</p><p>根据占用字节数可以求出每一种数据类型的取值范围。例如，TINYINT 需要 1 个字节（8bit）来存储，那么 TINYINT 无符号数的最大值为 28-1，即 255；TINYINT 有符号数的最大值为 27-1，即 127。其他类型的整数的取值范围计算方法相同，如下表所示。</p><table><thead><tr><th align="left">类型名称</th><th align="left">说明</th><th align="left">存储需求</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">-128〜127</td><td align="left">0 〜255</td></tr><tr><td align="left">SMALLINT</td><td align="left">-32768〜32767</td><td align="left">0〜65535</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">-8388608〜8388607</td><td align="left">0〜16777215</td></tr><tr><td align="left">INT (INTEGER)</td><td align="left">-2147483648〜2147483647</td><td align="left">0〜4294967295</td></tr><tr><td align="left">BIGINT</td><td align="left">-9223372036854775808〜9223372036854775807</td><td align="left">0〜18446744073709551615</td></tr></tbody></table><p>参考博客：<a href="https://www.cnblogs.com/cfinder010/p/3913825.html">https://www.cnblogs.com/cfinder010/p/3913825.html</a></p><img src="C:/Users/clearsky0601/AppData/Roaming/Typora/typora-user-images/image-20220119151548817.png" alt="image-20220119151548817" style="zoom:50%;" /><p><strong>不同的整数类型有不同的取值范围，并且需要不同的存储空间，因此应根据实际需要选择最合适的类型，这样有利于提高查询的效率和节省存储空间。</strong></p><h4 id="日期-时间类型"><a href="#日期-时间类型" class="headerlink" title="日期/时间类型"></a>日期/时间类型</h4><p>包括 YEAR、TIME、DATE、DATETIME 和 TIMESTAMP。</p><table><thead><tr><th align="left">类型名称</th><th align="left">日期格式</th><th align="left">日期范围</th><th align="left">存储需求</th></tr></thead><tbody><tr><td align="left">YEAR</td><td align="left">YYYY</td><td align="left">1901 ~ 2155</td><td align="left">1 个字节</td></tr><tr><td align="left">TIME</td><td align="left">HH:MM:SS</td><td align="left">-838:59:59 ~ 838:59:59</td><td align="left">3 个字节</td></tr><tr><td align="left">DATE</td><td align="left">YYYY-MM-DD</td><td align="left">1000-01-01 ~ 9999-12-3</td><td align="left">3 个字节</td></tr><tr><td align="left">DATETIME</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td align="left">8 个字节</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td align="left">4 个字节</td></tr></tbody></table><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p>包括 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET 等。</p><h4 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h4><p>包括 BIT、BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。</p><h1 id="表（创建、删除、修改）"><a href="#表（创建、删除、修改）" class="headerlink" title="表（创建、删除、修改）"></a>表（创建、删除、修改）</h1><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>创建数据表的过程是规定数据列的属性的过程，同时也是实施数据完整性（包括实体完整性、引用完整性和域完整性）约束的过程。接下来我们介绍一下创建数据表的语法形式。</p><h3 id="CREATE-TABLE-语句"><a href="#CREATE-TABLE-语句" class="headerlink" title="CREATE TABLE 语句"></a><strong>CREATE TABLE</strong> 语句</h3><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE &lt;表名&gt; ([表定义选项])[表选项][分区选项];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中， <code>[表定义选项]</code>的格式为：</p><p>&lt;列名1&gt; &lt;类型1&gt; … &lt;列名n&gt; &lt;类型n&gt;</p><p>CREATE TABLE 命令语法比较多，其主要是由表创建定义（create-definition）、表选项（table-options）和分区选项（partition-options）所组成的。</p><p>CREATE TABLE 语句的主要语法及使用说明如下：</p><ul><li>CREATE TABLE：用于创建给定名称的表，必须拥有表CREATE的权限。</li><li>&lt;表名&gt;：指定要创建表的名称，在 CREATE TABLE 之后给出，必须符合标识符命名规则。表名称被指定为 db_name.tbl_name，以便在特定的数据库中创建表。无论是否有当前数据库，都可以通过这种方式创建。在当前数据库中创建表时，可以省略 db-name。如果使用加引号的识别名，则应对数据库和表名称分别加引号。例如，’mydb’.’mytbl’ 是合法的，但 ‘mydb.mytbl’ 不合法。</li><li>&lt;表定义选项&gt;：表创建定义，由列名（col_name）、列的定义（column_definition）以及可能的空值说明、完整性约束或表索引组成。</li><li>默认的情况是，表被创建到当前的数据库中。若表已存在、没有当前数据库或者数据库不存在，则会出现错误。</li></ul><p>注意：使用 CREATE TABLE 创建表时，必须指定以下信息：</p><ul><li>要创建的表的名称不区分大小写，不能使用SQL语言中的关键字，如DROP、ALTER、INSERT等。</li><li>数据表中每个列（字段）的名称和数据类型，如果创建多个列，要用逗号隔开。</li><li>在指定的数据库中创建表: 数据表属于数据库，在创建数据表之前，应使用语句“USE&lt;数据库&gt;”指定操作在哪个数据库中进行，如果没有选择数据库，就会抛出 No database selected 的错误。</li></ul><p>实例：创建员工表 tb_emp1，结构如下表所示。</p><table><thead><tr><th align="left">字段名称</th><th align="left">数据类型</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">INT(ll)</td><td align="left">员工编号</td></tr><tr><td align="left">name</td><td align="left">VARCHAR(25)</td><td align="left">员工名称</td></tr><tr><td align="left">deptld</td><td align="left">INT(ll)</td><td align="left">所在部门编号</td></tr><tr><td align="left">salary</td><td align="left">FLOAT</td><td align="left">工资</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; USE test_db;Database changedmysql&gt; CREATE TABLE tb_emp1    -&gt; (    -&gt; id INT(11),    -&gt; name VARCHAR(25),    -&gt; deptId INT(11),    -&gt; salary FLOAT    -&gt; );Query OK, 0 rows affected (0.37 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语句执行后，便创建了一个名称为 tb_emp1 的数据表，使用 SHOW TABLES；语句查看数据表是否创建成功，如下所示</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW TABLES;+--------------------+| Tables_in_test_db  |+--------------------+| tb_emp1            |+--------------------+1 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h2><h3 id="DESCRIBE-和-SHOW-CREATE-TABLE-语句"><a href="#DESCRIBE-和-SHOW-CREATE-TABLE-语句" class="headerlink" title="DESCRIBE 和 SHOW CREATE TABLE 语句"></a><strong>DESCRIBE 和 SHOW CREATE TABLE 语句</strong></h3><p>DESCRIBE/DESC 语句可以查看表的字段信息，包括字段名、字段数据类型、是否为主键、是否有默认值等，语法规则如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DESCRIBE &lt;表名&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DESC &lt;表名&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例：</p><p>使用 DESCRIBE 查看表 tb_emp1 的结构，输入的 SQL 语句和运行结果如下所示。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; DESCRIBE tb_emp1;+--------+-------------+------+-----+---------+-------+| Field  | Type        | Null | Key | Default | Extra |+--------+-------------+------+-----+---------+-------+| id     | int(11)     | YES  |     | NULL    |       || name   | varchar(25) | YES  |     | NULL    |       || deptId | int(11)     | YES  |     | NULL    |       || salary | float        | YES  |     | NULL    |       |+--------+-------------+------+-----+---------+-------+4 rows in set (0.14 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，各个字段的含义如下：</p><ul><li>Null：表示该列是否可以存储 NULL 值。</li><li>Key：表示该列是否已编制索引。PRI 表示该列是表主键的一部分，UNI 表示该列是 UNIQUE 索引的一部分，MUL 表示在列中某个给定值允许出现多次。</li><li>Default：表示该列是否有默认值，如果有，值是多少。</li><li>Extra：表示可以获取的与给定列有关的附加信息，如 AUTO_INCREMENT 等。</li></ul><h3 id="SHOW-CREATE-TABLE语句"><a href="#SHOW-CREATE-TABLE语句" class="headerlink" title="SHOW CREATE TABLE语句"></a><strong>SHOW CREATE TABLE语句</strong></h3><p>SHOW CREATE TABLE语句可以用来显示创建表时的CREATE TABLE语句，语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW CREATE TABLE &lt;表名&gt;\G；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例： 使用 SHOW CREATE TABLE 查看表 tb_emp1 的详细信息，输入的 SQL 语句和运行结果如下所示。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW CREATE TABLE tb_emp1\G*************************** 1. row ***************************       Table: tb_emp1Create Table: CREATE TABLE &#96;tb_emp1&#96; (  &#96;id&#96; int(11) DEFAULT NULL,  &#96;name&#96; varchar(25) DEFAULT NULL,  &#96;deptId&#96; int(11) DEFAULT NULL,  &#96;salary&#96; float DEFAULT NULL) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;gb23121 row in set (0.03 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 SHOW CREATE TABLE 语句不仅可以查看创建表时的详细语句，而且可以查看存储引擎和字符编码。<br>如果不加“\G”参数，显示的结果可能非常混乱，加上“\G”参数之后，可使显示的结果更加直观，易于查看。</p><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><p> <strong>ALTER TABLE</strong> 语句</p><h3 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h3><h3 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h3><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><h3 id="修改字段数据类型"><a href="#修改字段数据类型" class="headerlink" title="修改字段数据类型"></a>修改字段数据类型</h3><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p><strong>DORP TABLE语句</strong></p><h1 id="表的增删改查"><a href="#表的增删改查" class="headerlink" title="表的增删改查"></a>表的增删改查</h1><h1 id="表的约束和索引"><a href="#表的约束和索引" class="headerlink" title="表的约束和索引"></a>表的约束和索引</h1><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>我们前面所学习的 MySQL 语句都是针对一个表或几个表的单条 SQL 语句，但是在数据库的实际操作中，并非所有操作都那么简单，经常会有一个完整的操作需要多条 SQL 语句处理多个表才能完成。例如，为了确认学生能否毕业，需要同时查询学生档案表、成绩表和综合表，此时就需要使用多条 SQL 语句来针对几个数据表完成这个处理要求。存储过程可以有效地完成这个数据库操作。</p><p>存储过程是数据库存储的一个重要的功能，但是 MySQL 在 5.0 以前并不支持存储过程，这使得 MySQL 在应用上大打折扣。好在 MySQL 5.0 终于开始已经支持存储过程，这样即可以大大提高数据库的处理速度，同时也可以提高数据库编程的灵活性。</p><p>存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服务时，只需调用“CALL存储过程名字”即可自动完成。</p><p>常用操作数据库的 SQL 语句在执行的时候需要先编译，然后执行。存储过程则采用另一种方式来执行 SQL 语句。</p><p>一个存储过程是一个可编程的函数，它在数据库中创建并保存，一般由 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的特定功能时，存储过程尤为合适。</p><p>存储过程通常有如下优点：</p><ol><li><strong>封装性</strong></li></ol><p>存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的 SQL 语句，并且数据库专业人员可以随时对存储过程进行修改，而不会影响到调用它的应用程序源代码。</p><ol start="2"><li><strong>可增强 SQL 语句的功能和灵活性</strong></li></ol><p>存储过程可以用流程控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p><ol start="3"><li><strong>可减少网络流量</strong></li></ol><p>由于存储过程是在服务器端运行的，且执行速度快，因此当客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而可降低网络负载。</p><ol start="4"><li><strong>高性能</strong></li></ol><p>存储过程执行一次后，产生的二进制代码就驻留在缓冲区，在以后的调用中，只需要从缓冲区中执行二进制代码即可，从而提高了系统的效率和性能。</p><ol start="5"><li><strong>提高数据库的安全性和数据的完整性</strong></li></ol><p>使用存储过程可以完成所有数据库操作，并且可以通过编程的方式控制数据库信息访问的权限。</p><h1 id="用户和权限"><a href="#用户和权限" class="headerlink" title="用户和权限"></a>用户和权限</h1><h1 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h1><h2 id="MySQL数据库备份"><a href="#MySQL数据库备份" class="headerlink" title="MySQL数据库备份"></a>MySQL数据库备份</h2><h2 id="MySQL数据库恢复"><a href="#MySQL数据库恢复" class="headerlink" title="MySQL数据库恢复"></a>MySQL数据库恢复</h2><h1 id="事务（TRANSACTION）"><a href="#事务（TRANSACTION）" class="headerlink" title="事务（TRANSACTION）"></a>事务（TRANSACTION）</h1><p>MySQL 数据库中事务是用户一系列的<u><strong>数据库操作序列</strong></u>，这些操作要么全做要么全不做，是一个<strong>不可分割的工作单位</strong>。</p><p>事务具有 4 个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持续性（Durability）。这 4 个特性简称为 ACID 特性。</p><ol><li><strong>原子性</strong></li></ol><p>事务必须是原子工作单元，事务中的操作要么全部执行，要么全都不执行，不能只完成部分操作。原子性在数据库系统中，由恢复机制来实现。</p><ol start="2"><li><strong>一致性</strong></li></ol><p>事务开始之前，数据库处于一致性的状态；事务结束后，数据库必须仍处于一致性状态。数据库一致性的定义是由用户负责的。例如，在银行转账中，用户可以定义转账前后两个账户金额之和保持不变。</p><ol start="3"><li><strong>隔离性</strong></li></ol><p>系统必须保证事务不受其他并发执行事务的影响，即当多个事务同时运行时，各事务之间相互隔离，不可互相干扰。事务查看数据时所处的状态，要么是另一个并发事务修改它之前的状态，要么是另一个并发事务修改它之后的状态，事务不会查看中间状态的数据。隔离性通过系统的并发控制机制实现。</p><ol start="4"><li><strong>持久性</strong></li></ol><p>一个已完成的事务对数据所做的任何变动在系统中是永久有效的，即使该事务产生的修改不正确，错误也将一直保持。持久性通过恢复机制实现，发生故障时，可以通过日志等手段恢复数据库信息。</p><p>事务的 ACID 原则保证了一个事务或者成功提交，或者失败回滚，二者必居其一。因此，它对事务的修改具有可恢复性。即当事务失败时，它对数据的修改都会恢复到该事务执行前的状态。</p><h2 id="开始事务"><a href="#开始事务" class="headerlink" title="开始事务"></a>开始事务</h2><h2 id="提交事务"><a href="#提交事务" class="headerlink" title="提交事务"></a>提交事务</h2><h2 id="撤销事物"><a href="#撤销事物" class="headerlink" title="撤销事物"></a>撤销事物</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小白教程：&lt;a href=&quot;http://www.voidme.com/mysql&quot;&gt;http://www.voidme.com/mysql&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; cl</summary>
      
    
    
    
    <category term="教程笔记" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>DS-绪论</title>
    <link href="http://example.com/2022/01/16/DS-%E7%BB%AA%E8%AE%BA/"/>
    <id>http://example.com/2022/01/16/DS-%E7%BB%AA%E8%AE%BA/</id>
    <published>2022-01-16T06:58:58.000Z</published>
    <updated>2022-01-16T06:59:03.215Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>线代基础-二次型</title>
    <link href="http://example.com/2022/01/16/%E7%BA%BF%E4%BB%A3%E5%9F%BA%E7%A1%80-%E4%BA%8C%E6%AC%A1%E5%9E%8B/"/>
    <id>http://example.com/2022/01/16/%E7%BA%BF%E4%BB%A3%E5%9F%BA%E7%A1%80-%E4%BA%8C%E6%AC%A1%E5%9E%8B/</id>
    <published>2022-01-16T06:55:58.000Z</published>
    <updated>2022-01-16T07:01:53.335Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>高数基础-多元函数微分学</title>
    <link href="http://example.com/2022/01/16/%E9%AB%98%E6%95%B0%E5%9F%BA%E7%A1%80-%E5%A4%9A%E5%85%83%E5%90%AB%E6%98%AF%E5%BE%AE%E5%88%86%E5%AD%A6/"/>
    <id>http://example.com/2022/01/16/%E9%AB%98%E6%95%B0%E5%9F%BA%E7%A1%80-%E5%A4%9A%E5%85%83%E5%90%AB%E6%98%AF%E5%BE%AE%E5%88%86%E5%AD%A6/</id>
    <published>2022-01-16T06:55:58.000Z</published>
    <updated>2022-01-16T06:57:08.012Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>线代基础-行列式</title>
    <link href="http://example.com/2022/01/16/%E7%BA%BF%E4%BB%A3%E5%9F%BA%E7%A1%80-%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
    <id>http://example.com/2022/01/16/%E7%BA%BF%E4%BB%A3%E5%9F%BA%E7%A1%80-%E8%A1%8C%E5%88%97%E5%BC%8F/</id>
    <published>2022-01-16T06:55:58.000Z</published>
    <updated>2022-01-16T07:02:55.098Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>高数基础-无穷级数</title>
    <link href="http://example.com/2022/01/16/%E9%AB%98%E6%95%B0%E5%9F%BA%E7%A1%80-%E6%97%A0%E7%A9%B7%E7%BA%A7%E6%95%B0/"/>
    <id>http://example.com/2022/01/16/%E9%AB%98%E6%95%B0%E5%9F%BA%E7%A1%80-%E6%97%A0%E7%A9%B7%E7%BA%A7%E6%95%B0/</id>
    <published>2022-01-16T06:54:58.000Z</published>
    <updated>2022-01-16T07:00:34.459Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>2022考研数学真题(数一)</title>
    <link href="http://example.com/2022/01/16/2022%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E7%9C%9F%E9%A2%98-%E6%95%B0%E4%B8%80/"/>
    <id>http://example.com/2022/01/16/2022%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E7%9C%9F%E9%A2%98-%E6%95%B0%E4%B8%80/</id>
    <published>2022-01-16T06:54:03.000Z</published>
    <updated>2022-01-16T06:54:03.298Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://example.com/2022/01/16/JavaScript/"/>
    <id>http://example.com/2022/01/16/JavaScript/</id>
    <published>2022-01-16T06:10:29.000Z</published>
    <updated>2022-01-16T06:12:52.288Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://example.com/2022/01/16/Git/"/>
    <id>http://example.com/2022/01/16/Git/</id>
    <published>2022-01-16T05:58:31.000Z</published>
    <updated>2022-01-16T06:04:56.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><blockquote><p>Git 是目前世界上最先进的<strong>分布式版本控制系统</strong>（没有之一）</p></blockquote><p>作用：源代码管理</p><p>作者是 Linux 之父：Linus Benedict Torvalds</p><p>当初开发 Git 仅仅是为了辅助 Linux 内核的开发（管理源代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Git 是目前世界上最先进的&lt;strong&gt;分布式版本控制系统&lt;/strong&gt;（没有之一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/01/16/Untitled/"/>
    <id>http://example.com/2022/01/16/Untitled/</id>
    <published>2022-01-16T02:05:30.402Z</published>
    <updated>2022-01-16T05:57:44.271Z</updated>
    
    <content type="html"><![CDATA[<p>博客设置</p><p><a href="https://www.antmoe.com/posts/3b43914f/">https://www.antmoe.com/posts/3b43914f/</a></p><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0meta%E9%A1%AF%E7%A4%BA">https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0meta%E9%A1%AF%E7%A4%BA</a></p><h2 id="新建项目时Pycharm找不到已安装的Python解释器："><a href="#新建项目时Pycharm找不到已安装的Python解释器：" class="headerlink" title="新建项目时Pycharm找不到已安装的Python解释器："></a>新建项目时Pycharm找不到已安装的Python解释器：</h2><p><img src="https://s2.loli.net/2022/01/16/QdeOV4TNxrKbGP6.png" alt="image-20220116101444447"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;博客设置&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.antmoe.com/posts/3b43914f/&quot;&gt;https://www.antmoe.com/posts/3b43914f/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://butterfly</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python基础复习</title>
    <link href="http://example.com/2022/01/16/Python%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2022/01/16/Python%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-01-16T01:09:29.000Z</published>
    <updated>2022-01-17T12:02:39.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python初步"><a href="#Python初步" class="headerlink" title="Python初步"></a>Python初步</h1><p>👣Python官网：<a href="https://www.python.org/">https://www.python.org/</a></p><p>​        -版本：<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p><p>​        -官方教程文档：<a href="https://docs.python.org/zh-cn/3.7/">https://docs.python.org/zh-cn/3.7/</a></p><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p>Python解释器作用：运行文件</p><ul><li>Python解释器种类<ul><li>CPython，C语言开发的解释器[官方]，应用广泛的解释器。</li><li>IPython，基于CPython的一种交互式解释器。</li><li>其他解释器<ul><li>PyPy，基于Python语言开发的解释器。</li><li>Jython，运行在Java平台的解释器，直接把Python代码编译成Java字节码执行。</li><li>IronPython，运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</li></ul></li></ul></li></ul><blockquote><p>使用的解释器：CPython</p></blockquote><p>下载地址：<a href="https://www.python.org/downloads/release/python-372/">https://www.python.org/downloads/release/python-372/</a></p><p><img src="https://s2.loli.net/2022/01/16/1qKTweA9XcjEMZP.png" alt="image-20220116092536205"></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>添加Python目录至Path：</p><img src="https://s2.loli.net/2022/01/16/6VohXewcr31iDyg.png" alt="image-20220116102913282" style="zoom: 67%;" /><p>验证是否成功：</p><p><img src="https://s2.loli.net/2022/01/16/HrOnLT37YehPqcy.png" alt="image-20220116102937989"></p><h2 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h2><p>快捷键：</p><pre class="line-numbers language-none"><code class="language-none">注释: Ctrl+&#x2F; 运行当前的窗口: Ctrl + shift +F10 运行: Shift + F10    调试: Shift + F9   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>单行注释</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 输出hello world</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello Python'</span><span class="token punctuation">)</span>  <span class="token comment"># 输出(简单的说明可以放到一行代码的后面，一般习惯代码后面添加两个空格再书写注释文字)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多行注释</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""    下面三行都是输出的作用，输出内容分别是：    hello Python    hello world"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello Python'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义：</p><pre class="line-numbers language-none"><code class="language-none">变量名 &#x3D; 值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标识符命名规则：</p><ul><li>由数字、字母、下划线组成</li><li>不能数字开头</li><li>不能使用内置关键字</li><li><strong>严格区分大小写</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">False     None    True   and      as       assert   break     class  continue  def     del    elif     else     except   finally   forfrom      global  if     import   in       is       lambda    nonlocalnot       or      pass   raise    return   try      while     with  yield<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名习惯：</p><ul><li>见名知义。</li><li>大驼峰：即每个单词首字母都大写，例如：<code>MyName</code>。</li><li>小驼峰：第二个（含）以后的单词首字母大写，例如：<code>myName</code>。</li><li>下划线：例如：<code>my_name</code>。</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型</p><p>六个标准的数据类型</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><ul><li>整型：int</li><li>浮点型：float</li><li>字符串：str</li><li>布尔型：bool</li><li>元组：tuple</li><li>集合：set</li><li>字典：dict</li></ul><p>🚩检测数据类型的方法：<code>type()</code></p><p>数据类型的转换：</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">🍋int(x [,base ])</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">🍋float(x )</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">complex(real [,imag ])</td><td align="center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td align="center">🍋str(x)</td><td align="center">将对象 x 转换为字符串</td></tr><tr><td align="center">repr(x )</td><td align="center">将对象 x 转换为表达式字符串</td></tr><tr><td align="center">🍋eval(str )</td><td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="center">🍋tuple(s )</td><td align="center">将序列 s 转换为一个元组</td></tr><tr><td align="center">🍋list(s )</td><td align="center">将序列 s 转换为一个列表</td></tr><tr><td align="center">chr(x )</td><td align="center">将一个整数转换为一个Unicode字符</td></tr><tr><td align="center">ord(x )</td><td align="center">将一个字符转换为它的ASCII整数值</td></tr><tr><td align="center">hex(x )</td><td align="center">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x )</td><td align="center">将一个整数转换为一个八进制字符串</td></tr><tr><td align="center">bin(x )</td><td align="center">将一个整数转换为一个二进制字符串</td></tr></tbody></table><p>需求：input接收用户输入，用户输入“1”，将这个数据1转换成整型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 接收用户输入</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您的幸运数字：'</span><span class="token punctuation">)</span><span class="token comment"># 2. 打印结果</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"您的幸运数字是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># 3. 检测接收到的用户输入的数据类型 -- str类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 4. 转换数据类型为整型 -- int类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. float() -- 转换成浮点型</span>num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2. str() -- 转换成字符串类型</span>num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3. tuple() -- 将一个序列转换成元组</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 4. list() -- 将一个序列转换成列表</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5. eval() -- 将字符串中的数据转换成Python表达式原本类型</span>str1 <span class="token operator">=</span> <span class="token string">'10'</span>str2 <span class="token operator">=</span> <span class="token string">'[1, 2, 3]'</span>str3 <span class="token operator">=</span> <span class="token string">'(1000, 2000, 3000)'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="🚩Debug"><a href="#🚩Debug" class="headerlink" title="🚩Debug"></a>🚩Debug</h2><p>Debug工具使用步骤：</p><ol><li>打断点</li><li>Debug调试</li></ol><p>打成功断点后，在文件内部任意位置 — 右键 – Debug’文件名’ — 即可调出Debug工具面板 – 单击Step Over/F8，即可按步执行代码。</p><img src="https://s2.loli.net/2022/01/16/Yx9ILkohg26cbDl.png" alt="image-20220116115902292" style="zoom: 67%;" /><p><strong>Debug输出面板分类</strong></p><ul><li>Debugger<ul><li>显示变量和变量的细节</li></ul></li><li>Console<ul><li>输出内容</li></ul></li></ul><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"提示信息"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>当程序执行到<code>input</code>，等待用户输入，输入完成之后才继续向下执行。</li><li>在Python中，<code>input</code>接收用户输入后，一般<strong>存储到变量</strong>，方便使用。</li><li>在Python中，<code>input</code>会把接收到的任意用户输入的数据都当做<strong>字符串</strong>处理。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您的密码：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'您输入的密码是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出结果如下：</p><blockquote><p>请输入您的密码：uuuuu<br>您输入的密码是uuuuu<br>&lt;class ‘str’&gt;</p></blockquote><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><table><thead><tr><th align="center">格式符号</th><th align="center">转换</th></tr></thead><tbody><tr><td align="center">🍋%s</td><td align="center">字符串</td></tr><tr><td align="center">🍋%d</td><td align="center">有符号的十进制整数</td></tr><tr><td align="center">🍋%f</td><td align="center">浮点数</td></tr><tr><td align="center">🍋%c</td><td align="center">字符</td></tr><tr><td align="center">%u</td><td align="center">无符号十进制整数</td></tr><tr><td align="center">%o</td><td align="center">八进制整数</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数（小写ox）</td></tr><tr><td align="center">%X</td><td align="center">十六进制整数（大写OX）</td></tr><tr><td align="center">%e</td><td align="center">科学计数法（小写’e’）</td></tr><tr><td align="center">%E</td><td align="center">科学计数法（大写’E’）</td></tr><tr><td align="center">%g</td><td align="center">%f和%e的简写</td></tr><tr><td align="center">%G</td><td align="center">%f和%E的简写</td></tr></tbody></table><blockquote><p>🚩注意：</p><ul><li>%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出</li><li>%.2f，表示小数点后显示的小数位数。</li></ul></blockquote><h4 id="f’-表达式-’格式化输出字符串"><a href="#f’-表达式-’格式化输出字符串" class="headerlink" title="f’{表达式}’格式化输出字符串"></a>f’{表达式}’格式化输出字符串</h4><p><strong>🚩格式化字符串除了%s，还可以写为<code>f&#39;&#123;表达式&#125;&#39;</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">18</span> name <span class="token operator">=</span> <span class="token string">'TOM'</span>weight <span class="token operator">=</span> <span class="token number">75.5</span>student_id <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 我的名字是TOM</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span class="token comment"># 我的学号是0001</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的学号是%4d'</span> <span class="token operator">%</span> student_id<span class="token punctuation">)</span><span class="token comment"># 我的体重是75.50公斤</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的体重是%.2f公斤'</span> <span class="token operator">%</span> weight<span class="token punctuation">)</span><span class="token comment"># 我的名字是TOM，今年18岁了</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s，今年%d岁了'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 我的名字是TOM，明年19岁了</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s，明年%d岁了'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 我的名字是TOM，明年19岁了</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'我的名字是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, 明年</span><span class="token interpolation"><span class="token punctuation">&#123;</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">岁了'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读。</p></blockquote><h4 id="转义字符："><a href="#转义字符：" class="headerlink" title="转义字符："></a><strong>转义字符</strong>：</h4><ul><li><code>\n</code>：换行。</li><li><code>\t</code>：制表符，一个tab键（4个空格）的距离。</li></ul><blockquote><p>在Python中，print()， 默认自带<code>end=&quot;\n&quot;</code>这个换行结束符，所以导致每两个<code>print</code>直接会换行展示，用户可以按需求更改结束符。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输出的内容'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输出的内容'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输出的内容'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出的内容<br>输出的内容输出的内容</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算数运算符</li><li>赋值运算符</li><li>复合赋值运算符</li><li>比较运算符</li><li>逻辑运算符</li></ul><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><table><thead><tr><th align="center">/</th><th align="center">除</th><th>10 / 2 输出结果为 5</th></tr></thead><tbody><tr><td align="center">//</td><td align="center">整除</td><td>9 // 4 输出结果为2</td></tr><tr><td align="center">%</td><td align="center">取余</td><td>9 % 4 输出结果为 1</td></tr><tr><td align="center">**</td><td align="center">指数</td><td>2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td></tr></tbody></table><blockquote><p>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></p></blockquote><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li>单个变量赋值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>多个变量赋值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">num1<span class="token punctuation">,</span> float1<span class="token punctuation">,</span> str1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>float1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等价于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等价于 c = c- a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等价于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等价于 c = c / a</td></tr><tr><td>//=</td><td>整除赋值运算符</td><td>c //= a 等价于 c = c // a</td></tr><tr><td>%=</td><td>取余赋值运算符</td><td>c %= a 等价于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c ** = a 等价于 c = c ** a</td></tr></tbody></table><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True</td></tr><tr><td>!=</td><td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True</td></tr><tr><td>&gt;</td><td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &gt; b) 为 True</td></tr><tr><td>&lt;</td><td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False</td></tr><tr><td>&gt;=</td><td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False如a=3,b=3，则(a &gt;= b) 为 True</td></tr><tr><td>&lt;=</td><td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=3,b=3，则(a &lt;= b) 为 True</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与”：<br />如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或”：<br />如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非”：<br />如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table><p>数字之间的逻辑运算</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">0</span>b <span class="token operator">=</span> <span class="token number">1</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">and</span> b<span class="token punctuation">)</span>  <span class="token comment"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token keyword">and</span> a<span class="token punctuation">)</span>  <span class="token comment"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">and</span> c<span class="token punctuation">)</span>  <span class="token comment"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token keyword">and</span> a<span class="token punctuation">)</span>  <span class="token comment"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token keyword">and</span> c<span class="token punctuation">)</span>  <span class="token comment"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token keyword">and</span> b<span class="token punctuation">)</span>  <span class="token comment"># 1</span><span class="token comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">or</span> b<span class="token punctuation">)</span>  <span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">or</span> c<span class="token punctuation">)</span>  <span class="token comment"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token keyword">or</span> c<span class="token punctuation">)</span>  <span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><ul><li>if语句语法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token punctuation">:</span>    条件成立执行的代码<span class="token number">1</span>    条件成立执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>if…else…</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token punctuation">:</span>    条件成立执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>    条件不成立执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多重判断</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>成立执行的代码<span class="token keyword">elif</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>    条件<span class="token number">2</span>成立执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>    以上条件都不成立执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>if嵌套</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>成立执行的代码    <span class="token keyword">if</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>        条件<span class="token number">2</span>成立执行的代码        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>在Python中，循环分为<code>while</code>和<code>for</code>两种，最终实现效果相同。</p><h4 id="while："><a href="#while：" class="headerlink" title="while："></a>while：</h4><p>语法格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>    条件成立重复执行的代码<span class="token number">1</span>    条件成立重复执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用一：计算1-100累加和</strong></p><p>分析：1-100的累加和，即1 + 2 + 3 + 4 +….，即前两个数字的相加结果 + 下一个数字( 前一个数字 + 1)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    result <span class="token operator">+=</span> i    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment"># 输出5050</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：为了验证程序的准确性，可以先改小数值，验证结果正确后，再改成1-100做累加。</p></blockquote><p><strong>应用二：计算1-100偶数累加和</strong></p><p>分析：1-100的偶数和，即 2 + 4 + 6 + 8….，得到偶数的方法如下：</p><ul><li>偶数即是和2取余结果为0的数字，可以加入条件语句判断是否为偶数，为偶数则累加</li><li>初始值为0 / 2 , 计数器每次累加2</li></ul><p>方法一：条件判断和2取余数则累加</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法一：条件判断和2取余数为0则累加计算</span>i <span class="token operator">=</span> <span class="token number">1</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> i    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment"># 输出2550</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：计数器控制</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法二：计数器控制增量为2</span>i <span class="token operator">=</span> <span class="token number">0</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    result <span class="token operator">+=</span> i    i <span class="token operator">+=</span> <span class="token number">2</span><span class="token comment"># 输出2550</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="🚩break和continue"><a href="#🚩break和continue" class="headerlink" title="🚩break和continue"></a>🚩break和continue</h5><p>break和continue是循环中<u>满足一定条件退出循环</u>的两种不同方式。</p><ul><li><code>break</code>：终止此循环。</li><li><code>continue</code>:退出当前一次循环继而执行下一次循环。</li></ul><p><strong>案例一：break</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'吃饱了不吃了'</span></span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'吃了第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">个苹果'</span></span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例二：continue</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'大虫子，第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">个不吃了'</span></span><span class="token punctuation">)</span>        <span class="token comment"># 在continue之前一定要修改计数器，否则会陷入死循环</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'吃了第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">个苹果'</span></span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="while循环嵌套"><a href="#while循环嵌套" class="headerlink" title="while循环嵌套"></a>while循环嵌套</h4><p>语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>成立执行的代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">while</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>        条件<span class="token number">2</span>成立执行的代码        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：所谓while循环嵌套，就是一个while里面嵌套一个while的写法，每个while和之前的基础语法是相同的。</p></blockquote><p><strong>理解执行流程</strong></p><p>当内部循环执行完成之后，再执行下一次外部循环的条件判断。</p><img src="G:/计算机相关课程/Python/黑马5.0/阶段1-Python核心编程/课件/03-流程控制之循环/循环.assets/while2.png" style="zoom: 80%;" /><p><strong>应用一：打印星号(正方形)</strong></p><p> 需求</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">*************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码</p><p>分析：一行输出5个星号，重复打印5行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 重复打印5行星星</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token comment"># 一行星星的打印</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token comment"># 一行内的星星不能换行，取消print默认结束符\n</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 每行结束要换行，这里借助一个空的print，利用print默认结束符换行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    j <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用二：打印星号(三角形)</strong></p><p>需求</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">***************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码</p><p>分析：==一行输出星星的个数和行号是相等的==，每行：重复打印行号数字个星号，将打印行星号的命令重复执行5次实现打印5行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 重复打印5行星星</span><span class="token comment"># j表示行号</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token comment"># 一行星星的打印</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    j <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用三：打印九九乘法表</strong></p><p>执行结果</p><p><img src="https://s2.loli.net/2022/01/16/oFTXBhOGlsMid5W.png" alt="image-20190104163553616"></p><p>代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 重复打印9行表达式</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>    <span class="token comment"># 打印一行里面的表达式 a * b = a*b</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">*</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token operator">*</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    j <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列<span class="token punctuation">:</span>    重复执行的代码<span class="token number">1</span>    重复执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例</strong></p><p>打印字符串中的每一个字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'clearsky'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>遇到e停止打印：<code>break</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'clearsky'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'遇到e不打印'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">cl遇到e不打印<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>遇到e不打印：<code>continue</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'clearsky'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'遇到e不打印'</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cl遇到e不打印arsky<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="else"><a href="#else" class="headerlink" title="else"></a>else</h4><blockquote><ul><li>while和for都可以配合else使用</li><li>else下方缩进的代码含义：当循环正常结束后执行的代码</li><li>break终止循环不会执行else下方缩进的代码</li><li>continue退出循环的方式执行else下方缩进的代码</li></ul></blockquote><p>循环可以和else配合使用，else下方缩进的代码指的是<strong>当循环正常结束之后要执行的代码</strong>。</p><h5 id="while…else"><a href="#while…else" class="headerlink" title="while…else"></a>while…else</h5><p>语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>    条件成立重复执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>    循环正常结束之后要执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'宝儿，我错了'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'原谅我了，真开心，哈哈哈哈'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>退出循环的方式<code>break</code>与c<code>ontinue</code></p><p>需求：女朋友生气，要求道歉5遍：宝儿，我错了。道歉到第三遍的时候，媳妇埋怨这一遍说的不真诚，是不是就是要退出循环了？<br>这个退出有两种可能性：</p><ul><li>更生气，不打算原谅，也不需要道歉了，程序如何书写？</li><li>只一遍不真诚，可以忍受，继续下一遍道歉，程序如何书写？</li></ul><ol><li>break</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这遍说的不真诚'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'宝儿，我错了'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'原谅我了，真开心，哈哈哈哈'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><ol start="2"><li>continue</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这遍说的不真诚'</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'宝儿，我错了'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇原谅我了，真开心，哈哈哈哈'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h5 id="for…else"><a href="#for…else" class="headerlink" title="for…else"></a>for…else</h5><p> 语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列<span class="token punctuation">:</span>    重复执行的代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>    循环正常结束之后要执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><p>示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'clearsky'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环正常结束之后执行的代码'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="退出循环的方式"><a href="#退出循环的方式" class="headerlink" title="退出循环的方式"></a>退出循环的方式</h3><ol><li>break终止循环</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'clearsky'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'遇到e不打印'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环正常结束之后执行的代码'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-none"><code class="language-none">cl遇到e不打印<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>没有执行else缩进的代码。</p></blockquote><ol start="2"><li>continue控制循环</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'clearsky'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'遇到e不打印'</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环正常结束之后执行的代码'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-none"><code class="language-none">cl遇到e不打印arsky循环正常结束之后执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h1 id="数据序列"><a href="#数据序列" class="headerlink" title="数据序列"></a>数据序列</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串概述"><a href="#字符串概述" class="headerlink" title="字符串概述"></a>字符串概述</h3><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul><li>一对引号字符串</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name1 <span class="token operator">=</span> <span class="token string">'Tom'</span>name2 <span class="token operator">=</span> <span class="token string">"Rose"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>三引号字符串</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name3 <span class="token operator">=</span> <span class="token triple-quoted-string string">''' Tom '''</span>name4 <span class="token operator">=</span> <span class="token triple-quoted-string string">""" Rose """</span>a <span class="token operator">=</span> <span class="token triple-quoted-string string">''' i am Tom,         nice to meet you! '''</span>b <span class="token operator">=</span> <span class="token triple-quoted-string string">""" i am Rose,         nice to meet you! """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：三引号形式的字符串支持换行。</p></blockquote><blockquote><p>思考：如果创建一个字符串<code> I&#39;m Tom</code>?</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> <span class="token string">"I'm Tom"</span>d <span class="token operator">=</span> <span class="token string">'I\'m Tom'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>需求：字符串<code>name = &quot;abcdef&quot;</code>，取到不同下标对应的数据。</p><ul><li>代码</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输出结果</li></ul><pre class="line-numbers language-none"><code class="language-none">bac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：下标从0开始。</p></blockquote><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作。</p><p>语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">序列<span class="token punctuation">[</span>开始位置下标<span class="token punctuation">:</span>结束位置下标<span class="token punctuation">:</span>步长<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意</p></blockquote><pre><code> 1. 不包含结束位置下标对应的数据， 正负整数均可； 2. 步长是选取间隔，正负整数均可，默认步长为1。</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># cde</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># cde</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># abcde</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># bcdefg</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># abcdefg</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># aceg</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># abcdef, 负1表示倒数第一个数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># def</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># gfedcba</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串输出"><a href="#字符串输出" class="headerlink" title="字符串输出"></a>字符串输出</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'我的名字是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串输入"><a href="#字符串输入" class="headerlink" title="字符串输入"></a>字符串输入</h4><p>在Python中，使用<code>input()</code>接收用户输入。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您的名字：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'您输入的名字是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您的密码：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'您输入的密码是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串操作："><a href="#字符串操作：" class="headerlink" title="字符串操作："></a>字符串操作：</h3><p>字符串的常用操作方法有<u>查找、修改和判断</u>三大类。</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>所谓字符串查找方法即是查找子串在字符串中的<u>位置</u>或出现的<u>次数</u>。</p><ul><li>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>find<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 12</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 23</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ands'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>index<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 12</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 23</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'ands'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>rfind()： 和find()功能相同，但查找方向为==右侧==开始。</li><li>rindex()：和index()功能相同，但查找方向为==右侧==开始。</li><li>count()：返回某个子串在字符串中出现的次数</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>count<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'ands'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。</p><ul><li>replace()：替换</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>旧子串<span class="token punctuation">,</span> 新子串<span class="token punctuation">,</span> 替换次数<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：替换次数如果查出子串出现次数，则替换次数为该子串出现次数。</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment"># 结果：hello world he itcast he itheima he Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'he'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：hello world he itcast he itheima he Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'he'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：hello world and itcast and itheima and Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：数据按照是否能直接修改分为==可变类型==和==不可变类型==两种。字符串类型的数据修改的时候不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型。</p></blockquote><ul><li>split()：按照指定字符分割字符串。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>split<span class="token punctuation">(</span>分割字符<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：num表示的是分割字符出现的次数，即将来返回数据个数为num+1个。</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment"># 结果：['hello world ', ' itcast ', ' itheima ', ' Python']</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：['hello world ', ' itcast ', ' itheima and Python']</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：['hello', 'world', 'and', 'itcast', 'and', 'itheima', 'and', 'Python']</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：['hello', 'world', 'and itcast and itheima and Python']</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：如果分割字符是原有字符串中的子串，分割后则丢失该子串。</p></blockquote><ul><li>join()：用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符或子串<span class="token punctuation">.</span>join<span class="token punctuation">(</span>多字符串组成的序列<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chuan'</span><span class="token punctuation">,</span> <span class="token string">'zhi'</span><span class="token punctuation">,</span> <span class="token string">'bo'</span><span class="token punctuation">,</span> <span class="token string">'ke'</span><span class="token punctuation">]</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'ddd'</span><span class="token punctuation">)</span><span class="token comment"># 结果：chuan_zhi_bo_ke</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：aa...b...cc...ddd</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'...'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>capitalize()：将字符串第一个字符转换成大写。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment"># 结果：Hello world and itcast and itheima and python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：capitalize()函数转换后，只字符串第一个字符大写，其他的字符全都小写。</p></blockquote><ul><li>title()：将字符串每个单词首字母转换成大写。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment"># 结果：Hello World And Itcast And Itheima And Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>lower()：将字符串中大写转小写。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment"># 结果：hello world and itcast and itheima and python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>upper()：将字符串中小写转大写。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment"># 结果：HELLO WORLD AND ITCAST AND ITHEIMA AND PYTHON</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>lstrip()：删除字符串左侧空白字符。</p></li><li><p>rstrip()：删除字符串右侧空白字符。</p></li><li><p>strip()：删除字符串两侧空白字符。</p></li></ul><ul><li>ljust()：返回一个原字符串左对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串。</li></ul><p>语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>长度<span class="token punctuation">,</span> 填充字符<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出效果</p><ul><li>rjust()：返回一个原字符串右对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</li><li>center()：返回一个原字符串居中对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</li></ul><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><p>所谓判断即是判断真假，返回的结果是布尔型数据类型：True 或 False。</p><ul><li>startswith()：检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python   "</span><span class="token comment"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>endswith()：：检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>isalpha()：如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr1 <span class="token operator">=</span> <span class="token string">'hello'</span>mystr2 <span class="token operator">=</span> <span class="token string">'hello12345'</span><span class="token comment"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr1<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr2<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>isdigit()：如果字符串只包含数字则返回 True 否则返回 False。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr1 <span class="token operator">=</span> <span class="token string">'aaa12345'</span>mystr2 <span class="token operator">=</span> <span class="token string">'12345'</span><span class="token comment"># 结果： False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr1<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr2<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>isalnum()：如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr1 <span class="token operator">=</span> <span class="token string">'aaa12345'</span>mystr2 <span class="token operator">=</span> <span class="token string">'12345-'</span><span class="token comment"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr1<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr2<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>isspace()：如果字符串中只包含空白，则返回 True，否则返回 False。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr1 <span class="token operator">=</span> <span class="token string">'1 2 3 4 5'</span>mystr2 <span class="token operator">=</span> <span class="token string">'     '</span><span class="token comment"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr1<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr2<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>下标<ul><li>计算机为数据序列中每个元素分配的从0开始的编号</li></ul></li><li>切片</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">序列名<span class="token punctuation">[</span>开始位置下标<span class="token punctuation">:</span>结束位置下标<span class="token punctuation">:</span>步长<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>常用操作方法<ul><li>find()</li><li>index()</li></ul></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>列表的格式</li><li>列表的常用操作</li><li>列表的循环遍历</li><li>列表的嵌套使用</li></ul><h3 id="列表概述"><a href="#列表概述" class="headerlink" title="列表概述"></a>列表概述</h3><p>格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>数据<span class="token number">1</span><span class="token punctuation">,</span> 数据<span class="token number">2</span><span class="token punctuation">,</span> 数据<span class="token number">3</span><span class="token punctuation">,</span> 数据<span class="token number">4.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列表可以一次性存储多个数据，且<u>可以为不同数据类型</u>。</p><h3 id="列表的常用操作"><a href="#列表的常用操作" class="headerlink" title="列表的常用操作"></a>列表的常用操作</h3><p>列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：增、删、改、查。</p><h4 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h4><h5 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Tom</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Lily</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Rose</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查找的相关函数"><a href="#查找的相关函数" class="headerlink" title="查找的相关函数"></a><strong>查找的相关函数</strong></h5><ul><li>查下标：index()：返回指定数据所在位置的下标 。</li></ul><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>index<span class="token punctuation">(</span>数据<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：如果查找的数据不存在则报错。</p></blockquote><ul><li>查出现次数：count()：统计指定数据在当前列表中出现的次数。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'Lily'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查列表表长：len()：访问列表长度，即列表中数据的个数。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="判断是否存在"><a href="#判断是否存在" class="headerlink" title="判断是否存在"></a>判断是否存在</h5><ul><li>in：判断指定数据在某个列表序列，如果在返回True，否则返回False</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token comment"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Lily'</span> <span class="token keyword">in</span> name_list<span class="token punctuation">)</span><span class="token comment"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Lilys'</span> <span class="token keyword">in</span> name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token comment"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Lily'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> name_list<span class="token punctuation">)</span><span class="token comment"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Lilys'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>体验案例</li></ul><p>需求：查找用户输入的名字是否已经存在。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您要搜索的名字：'</span><span class="token punctuation">)</span><span class="token keyword">if</span> name <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'您输入的名字是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, 名字已经存在'</span></span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'您输入的名字是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, 名字不存在'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p>作用：增加指定数据到列表中。</p><ul><li>append()：列表结尾追加数据。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>append<span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>!、、<a href="02-%E5%88%97%E8%A1%A8.assets/image-20190130160154636.png">image-20190130160154636</a></p><blockquote><p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据。</p></blockquote><ol start="3"><li>注意点</li></ol><p>如果append()追加的数据是一个序列，则追加整个序列到列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'xiaohong'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily', 'Rose', ['xiaoming', 'xiaohong']]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>extend()：列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>快速体验</p><p>2.1 单个数据</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily', 'Rose', 'x', 'i', 'a', 'o', 'm', 'i', 'n', 'g']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.2 序列数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'xiaohong'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming', 'xiaohong']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>insert()：指定位置新增数据。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>位置下标<span class="token punctuation">,</span> 数据<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'xiaoming'</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'xiaoming', 'Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li>del</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> 目标<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token comment"># 结果：报错提示：name 'name_list' is not defined</span><span class="token keyword">del</span> name_list<span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除指定数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">del</span> name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 结果：['Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>下标<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>del_name <span class="token operator">=</span> name_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 结果：Lily</span><span class="token keyword">print</span><span class="token punctuation">(</span>del_name<span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>remove()：移除列表中某个数据的第一个匹配项。</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'Rose'</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>clear()：清空列表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span> <span class="token comment"># 结果： []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h4><ul><li>修改指定下标数据</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token comment"># 结果：['aaa', 'Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>逆置：reverse()</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>num_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 结果：[8, 6, 3, 2, 5, 1]</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>排序：sort()</li></ul><ol><li>语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>sort<span class="token punctuation">(</span> key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：reverse表示排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>num_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 结果：[1, 2, 3, 5, 6, 8]</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p>函数：copy()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_li2 <span class="token operator">=</span> name_list<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_li2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表的循环遍历"><a href="#列表的循环遍历" class="headerlink" title="列表的循环遍历"></a>列表的循环遍历</h3><p>需求：依次打印列表中的各个数据。</p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p><p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'小绿'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>思考： 如何查找到数据”李四”？</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 第一步：按下标查找到李四所在的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 第二步：从李四所在的列表里面，再按下标找到数据李四</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li>列表的格式</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>数据<span class="token number">1</span><span class="token punctuation">,</span> 数据<span class="token number">2</span><span class="token punctuation">,</span> 数据<span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>常用操作方法<ul><li>index()</li><li>len()</li><li>append()</li><li>pop()</li><li>remove()</li></ul></li><li>列表嵌套</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'小绿'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>name_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>一个元组可以存储多个数据，元组内的数据是<u><strong>不能修改</strong></u>的。</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h2 id="公共操作"><a href="#公共操作" class="headerlink" title="公共操作"></a>公共操作</h2><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h3 id="函数概述"><a href="#函数概述" class="headerlink" title="函数概述"></a>函数概述</h3><p>—函数的作用</p><p>2二函数的使用步骤</p><p>三函数的参数作用</p><p>&gt;四函数的返回值作用</p><p>&gt;五函数的说明文档</p><p>六函数嵌套调用</p><p>2t.函数应用</p><p>八.总结</p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>一.变量作用域</p><p>二.多函数程序执行流程</p><p>三函数的返回值</p><p>&gt;四.函数的参数</p><p>&gt;五拆包和交换变量值</p><p>2六引用</p><p>七可变和不可变类型</p><p>八总结</p><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="文件的基本操作"><a href="#文件的基本操作" class="headerlink" title="文件的基本操作"></a>文件的基本操作</h2><p>文件的基本操作</p><ul><li>打开</li><li>读写</li><li>关闭</li></ul><h3 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h3><p>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">open</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。</p><p>mode：设置打开文件的模式(访问模式)：只读、写入、追加等。</p><table><thead><tr><th align="center">模式</th><th>描述</th></tr></thead><tbody><tr><td align="center">r</td><td>以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="center">ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的</td></tr></tbody></table><p>🔨：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：此时的<code>f</code>是<code>open</code>函数的文件对象。</p></blockquote><h3 id="文件对象方法"><a href="#文件对象方法" class="headerlink" title="文件对象方法"></a>文件对象方法</h3><h5 id="写"><a href="#写" class="headerlink" title="写"></a>写</h5><ul><li>语法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">文件对象<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'内容'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>体验</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token comment"># 2.文件写入</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token comment"># 3. 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ol><li><code>w    </code>和<code>a</code>模式：如果文件不存在则创建该文件；如果文件存在，<code>w</code>模式先清空再写入，<code>a</code>模式直接末尾追加。</li><li><code>r</code>模式：如果文件不存在则报错。</li></ol></blockquote><h5 id="读"><a href="#读" class="headerlink" title="读"></a>读</h5><ul><li>read()</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">文件对象<span class="token punctuation">.</span>read<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</p></blockquote><ul><li>readlines()</li></ul><p>readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ['hello world\n', 'abcdefg\n', 'aaa\n', 'bbb\n', 'ccc']</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>readline()</li></ul><p>readline()一次读取一行内容。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'第一行：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>content<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'第二行：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>content<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="seek"><a href="#seek" class="headerlink" title="seek()"></a>seek()</h5><p>作用：用来移动文件指针。</p><p>语法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">文件对象<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>偏移量<span class="token punctuation">,</span> 起始位置<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>起始位置：</p><ul><li>0：文件开头</li><li>1：当前位置</li><li>2：文件结尾</li></ul></blockquote><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><pre class="line-numbers language-open" data-language="open"><code class="language-open">文件对象.close()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h2><p>需求：用户输入当前目录下任意文件名，程序完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>接收用户输入的文件名</li><li>规划备份文件名</li><li>备份文件写入数据</li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ol><li>接收用户输入目标文件名</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">old_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您要备份的文件名：'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>规划备份文件名</p><p>2.1 提取目标文件后缀</p><p>2.2 组织备份的文件名，xx[备份]后缀</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 2.1 提取文件后缀点的下标</span>index <span class="token operator">=</span> old_name<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token comment"># print(index)  # 后缀中.的下标</span><span class="token comment"># print(old_name[:index])  # 源文件名（无后缀）</span><span class="token comment"># 2.2 组织新文件名 旧文件名 + [备份] + 后缀</span>new_name <span class="token operator">=</span> old_name<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'[备份]'</span> <span class="token operator">+</span> old_name<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># 打印新文件名（带后缀）</span><span class="token comment"># print(new_name)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>备份文件写入数据</p><p>3.1 打开源文件 和 备份文件</p><p>3.2 将源文件数据写入备份文件</p><p>3.3 关闭文件</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 3.1 打开文件</span>old_f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>old_name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>new_f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>new_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment"># 3.2 将源文件数据写入备份文件</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    con <span class="token operator">=</span> old_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    new_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token comment"># 3.3 关闭文件</span>old_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>new_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>如果用户输入<code>.txt</code>，这是一个无效文件，程序如何更改才能限制只有有效的文件名才能备份？</p><p>答：添加条件判断即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">old_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您要备份的文件名：'</span><span class="token punctuation">)</span>index <span class="token operator">=</span> old_name<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token keyword">if</span> index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    postfix <span class="token operator">=</span> old_name<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span>new_name <span class="token operator">=</span> old_name<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'[备份]'</span> <span class="token operator">+</span> postfixold_f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>old_name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>new_f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>new_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    con <span class="token operator">=</span> old_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    new_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>con<span class="token punctuation">)</span>old_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>new_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件和文件夹的操作"><a href="#文件和文件夹的操作" class="headerlink" title="文件和文件夹的操作"></a>文件和文件夹的操作</h2><p>在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</p><ol><li>导入os模块</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>使用<code>os</code>模块相关功能</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文件重命名："><a href="#文件重命名：" class="headerlink" title="文件重命名："></a>文件重命名：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>目标文件名<span class="token punctuation">,</span> 新文件名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除文件："><a href="#删除文件：" class="headerlink" title="删除文件："></a>删除文件：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>目标文件名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建文件夹："><a href="#创建文件夹：" class="headerlink" title="创建文件夹："></a>创建文件夹：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>文件夹名字<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除文件夹："><a href="#删除文件夹：" class="headerlink" title="删除文件夹："></a>删除文件夹：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span>文件夹名字<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取当前目录："><a href="#获取当前目录：" class="headerlink" title="获取当前目录："></a>获取当前目录：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="改变默认目录："><a href="#改变默认目录：" class="headerlink" title="改变默认目录："></a>改变默认目录：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>目录<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取目录列表："><a href="#获取目录列表：" class="headerlink" title="获取目录列表："></a>获取目录列表：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>目录<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><p>需求：批量修改文件名，既可添加指定字符串，又能删除指定字符串。</p><ul><li>步骤</li></ul><ol><li>设置添加删除字符串的的标识</li><li>获取指定目录的所有文件</li><li>将原有文件名添加/删除指定字符串，构造新名字</li><li>os.rename()重命名</li></ol><ul><li>代码</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 获取指定目录</span>dir_name <span class="token operator">=</span> <span class="token string">'./'</span><span class="token comment"># 获取指定目录的文件列表</span>file_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token comment"># print(file_list)</span><span class="token comment"># 遍历文件列表内的文件</span><span class="token keyword">for</span> name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>    <span class="token comment"># 添加指定字符</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        new_name <span class="token operator">=</span> <span class="token string">'Python-'</span> <span class="token operator">+</span> name    <span class="token comment"># 删除指定字符</span>    <span class="token keyword">elif</span> flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'Python-'</span><span class="token punctuation">)</span>        new_name <span class="token operator">=</span> name<span class="token punctuation">[</span>num<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment"># 打印新文件名，测试程序正确性</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_name<span class="token punctuation">)</span>        <span class="token comment"># 重命名</span>    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>dir_name<span class="token operator">+</span>name<span class="token punctuation">,</span> dir_name<span class="token operator">+</span>new_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><ul><li><p>文件操作步骤</p><ul><li>打开</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">文件对象 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>目标文件<span class="token punctuation">,</span> 访问模式<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>操作</p><ul><li>读</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">文件对象<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>文件对象<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>文件对象<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>写</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">文件对象<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>seek()</li></ul></li><li><p>关闭</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">文件对象<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>主访问模式</p><ul><li>w：写，文件不存在则新建该文件</li><li>r：读，文件不存在则报错</li><li>a：追加</li></ul></li><li><p>文件和文件夹操作</p><ul><li>重命名：os.rename()</li><li>获取当前目录：os.getcwd()</li><li>获取目录列表：os.listdir()</li></ul></li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h1 id="模块-包-异常"><a href="#模块-包-异常" class="headerlink" title="模块_包_异常"></a>模块_包_异常</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python初步&quot;&gt;&lt;a href=&quot;#Python初步&quot; class=&quot;headerlink&quot; title=&quot;Python初步&quot;&gt;&lt;/a&gt;Python初步&lt;/h1&gt;&lt;p&gt;👣Python官网：&lt;a href=&quot;https://www.python.org/&quot;&gt;h</summary>
      
    
    
    
    <category term="教程笔记" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>linux复习</title>
    <link href="http://example.com/2022/01/11/linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/01/11/linux%E5%91%BD%E4%BB%A4/</id>
    <published>2022-01-11T15:13:11.000Z</published>
    <updated>2022-01-16T07:08:27.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux入门"><a href="#Linux入门" class="headerlink" title="Linux入门"></a>Linux入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Linux内核最初只是由<u>芬兰人</u><strong>林纳斯·托瓦兹</strong>（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。Linux能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debain、Fedora、SuSE、OpenSUSE。</p><h2 id="与Windows的区别"><a href="#与Windows的区别" class="headerlink" title="与Windows的区别"></a>与Windows的区别</h2><h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h1><h1 id="Linux文件与目录结构"><a href="#Linux文件与目录结构" class="headerlink" title="Linux文件与目录结构"></a>Linux文件与目录结构</h1><h2 id="Linux文件"><a href="#Linux文件" class="headerlink" title="Linux文件"></a>Linux文件</h2><p>Linux系统中一切皆文件。</p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="img"></p><ul><li><p><strong>/bin</strong>：<br>bin (Binaries 二进制文件) 的缩写,<br>存放着最经常使用的命令。</p></li><li><p><strong>/boot：</strong><br>启动时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>/dev ：</strong><br>dev 是 Device(设备) 的缩写,<br>存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放系<strong>统管理所需要的配置文件</strong>。</p></li><li><p><strong>/home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>/lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>/media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>/opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><pre class="line-numbers language-none"><code class="language-none">echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;icmp_echo_ignore_all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>/selinux</strong>：<br>这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>/srv</strong>：<br>该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>/sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>/tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>/usr</strong>：<br>usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>/var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>/etc</strong>： 上边也提到了，这个是<u>系统中的配置文件</u>，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 /bin/ls 目录下的。</p><p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给 root 使用的指令。</p><p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 /var/log 目录下，另外 mail 的预设放置也是在这里。</p><h1 id="VI-VIM编辑器"><a href="#VI-VIM编辑器" class="headerlink" title="VI/VIM编辑器"></a>VI/VIM编辑器</h1><h2 id="什么是VI-VIM编辑器？"><a href="#什么是VI-VIM编辑器？" class="headerlink" title="什么是VI/VIM编辑器？"></a>什么是VI/VIM编辑器？</h2><p>VI是Unix操作系统和类Unix操作系统中最通用的文本编辑器。</p><p>VIM编辑器是从VI发展出来的一个性能更强大的文本编辑器。可以主动的以字体颜色辨别语法的正确性，方便程序设计。VIM与VI编辑器完全兼容。</p><h2 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h2><p>以vi打开一个档案就直接进入一般模式了（这是默认的模式）。在这个模式中， 你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、贴上』来处理你的文件数据。</p><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>yy</td><td>复制光标当前一行</td></tr><tr><td>y数字y</td><td>复制一段（从第几行到第几行）</td></tr><tr><td>p</td><td>箭头移动到目的行粘贴</td></tr><tr><td>u</td><td>撤销上一步</td></tr><tr><td>dd</td><td>删除光标当前行</td></tr><tr><td>d数字d</td><td>删除光标（含）后多少行</td></tr><tr><td>x</td><td>删除一个字母，相当于del</td></tr><tr><td>X</td><td>删除一个字母，相当于Backspace</td></tr><tr><td>yw</td><td>复制一个词</td></tr><tr><td>dw</td><td>删除一个词</td></tr><tr><td>shift+^</td><td>移动到行头</td></tr><tr><td>shift+$</td><td>移动到行尾</td></tr><tr><td>1+shift+g</td><td>移动到页头，数字</td></tr><tr><td>shift+g</td><td>移动到页尾</td></tr><tr><td>数字N+shift+g</td><td>移动到目标行</td></tr></tbody></table><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><p>在一般模式中可以进行删除、复制、粘贴等的动作，但是却无法编辑文件内容的！要等到你按下『i, I, o, O, a, A, r, R』等任何一个字母之后才会进入编辑模式。通常在Linux中，按下这些按键时，在画面的左下方会出现『INSERT或 REPLACE』的字样，此时才可以进行编辑。</p><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>i</td><td>当前光标前</td></tr><tr><td>a</td><td>当前光标后</td></tr><tr><td>o</td><td>当前光标行的下一行</td></tr><tr><td>I</td><td>光标所在行最前</td></tr><tr><td>A</td><td>光标所在行最后</td></tr><tr><td>O</td><td>当前光标行的上一行</td></tr></tbody></table><p>而如果要回到一般模式时， 则必须要按下『Esc』这个按键即可退出编辑模式。</p><h2 id="指令模式"><a href="#指令模式" class="headerlink" title="指令模式"></a>指令模式</h2><p>在一般模式当中，输入『 : / ?』3个中的任何一个按钮，就可以将光标移动到最底下那一行。</p><p>在这个模式当中， 可以提供你『搜寻资料』的动作，而读取、存盘、大量取代字符、离开 vi 、显示行号等动作是在此模式中达成的！</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:!</td><td>强制执行</td></tr><tr><td>/要查找的词</td><td>n 查找下一个，N 往上查找</td></tr><tr><td>? 要查找的词</td><td>n是查找上一个，shift+n是往下查找</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>关闭行号</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110172652707.png" alt="image-20220110172652707"></p><h1 id="网络配置和系统管理操作"><a href="#网络配置和系统管理操作" class="headerlink" title="网络配置和系统管理操作"></a>网络配置和系统管理操作</h1><h2 id="查看网络IP和网关"><a href="#查看网络IP和网关" class="headerlink" title="查看网络IP和网关"></a>查看网络IP和网关</h2><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110173212533.png" alt="image-20220110173212533"></p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110173127766.png" alt="image-20220110173127766"></p><h2 id="配置网络ip地址"><a href="#配置网络ip地址" class="headerlink" title="配置网络ip地址"></a>配置网络ip地址</h2><h3 id="ifconfig-配置网络接口"><a href="#ifconfig-配置网络接口" class="headerlink" title="ifconfig 配置网络接口"></a>ifconfig 配置网络接口</h3><p><code>ifconfig</code> :network interfaces configuring 网络接口配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#（功能描述：显示所有网络接口的配置信息）ifconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110174046728.png" alt="image-20220110174046728"></p><h3 id="ping-测试主机之间网络连通性"><a href="#ping-测试主机之间网络连通性" class="headerlink" title="ping 测试主机之间网络连通性"></a>ping 测试主机之间网络连通性</h3><p>ping外网：</p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110174132273.png" alt="image-20220110174132273"></p><p>ping主机</p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110174239809.png" alt="image-20220110174239809"></p><p>ping Hadoop103</p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110174441714.png" alt="image-20220110174441714"></p><h3 id="修改IP地址"><a href="#修改IP地址" class="headerlink" title="修改IP地址"></a>修改IP地址</h3><h2 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#（功能描述：查看当前服务器的主机名称）hostname  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看当前服务器主机名称</p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110173809459.png" alt="image-20220110173809459"></p><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><h3 id="service-后台服务管理"><a href="#service-后台服务管理" class="headerlink" title="service 后台服务管理"></a>service 后台服务管理</h3><p>基本语法:</p><p>service 服务名 start         （功能描述：开启服务）</p><p>service 服务名 stop         （功能描述：关闭服务）</p><p>service 服务名 restart       （功能描述：重新启动服务）</p><p>service 服务名 status        （功能描述：查看服务状态）</p><h3 id="关闭防火墙-1"><a href="#关闭防火墙-1" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>查看防火墙状态</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">service iptables status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110185122435.png" alt="image-20220110185122435"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>临时关闭防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">service iptables stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看防火墙开机启动状态</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chkconfig iptables --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置开机时关闭防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chkconfig iptables off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h2><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>正确的关机流程为：sync &gt; shutdown &gt; reboot &gt; halt</p><ul><li><code>sync </code>         （功能描述：将数据由内存同步到硬盘中）</li><li><code>halt </code>         （功能描述：关闭系统，等同于shutdown -h now 和 poweroff）</li><li><code>reboot</code>         （功能描述：就是重启，等同于 shutdown -r now）</li><li><code>shutdown</code>      [选项]   时间 </li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-h</td><td>-h=halt关机</td></tr><tr><td>-r</td><td>-r=reboot重启</td></tr></tbody></table><table><thead><tr><th>时间参数</th><th>功能</th></tr></thead><tbody><tr><td>now</td><td>立刻关机</td></tr><tr><td>时间</td><td>等待多久后关机（时间单位是<strong>分钟</strong>）。</td></tr></tbody></table><blockquote><p>Linux系统中为了提高磁盘的读写效率，对磁盘采取了 “预读迟写”操作方式。当用户保存文件时，Linux核心并不一定立即将保存数据写入物理磁盘中，而是将数据保存在缓冲区中，等缓冲区满时再写入磁盘，这种方式可以极大的提高磁盘写入数据的效率。但是，也带来了安全隐患，如果数据还未写入磁盘时，系统掉电或者其他严重问题出现，则将导致数据丢失。使用sync指令可以立即将缓冲区的数据写入磁盘。</p></blockquote><p>🚩案例实操</p><p>将数据由内存同步到硬盘中:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sync  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">reboot <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关机:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">halt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计算机将在1分钟后关机，并且会显示在登录用户的当前屏幕中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shutdown -h 1 ‘This server will shutdown after 1 mins’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110192346032.png" alt="image-20220110192346032"></p><p>立马关机（等同于 halt）:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shutdown -h now <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统立马重启（等同于 reboot）:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="找回root密码"><a href="#找回root密码" class="headerlink" title="找回root密码"></a>找回root密码</h2><h2 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h2><h1 id="远程登陆"><a href="#远程登陆" class="headerlink" title="远程登陆"></a>远程登陆</h1><h1 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="man-获得帮助信息"><a href="#man-获得帮助信息" class="headerlink" title="man 获得帮助信息"></a>man 获得帮助信息</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#功能描述：获得帮助信息man [命令或配置文件]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>信息</th><th>功能</th></tr></thead><tbody><tr><td>NAME</td><td>命令的名称和单行描述</td></tr><tr><td>SYNOPSIS</td><td>怎样使用命令</td></tr><tr><td>DESCRIPTION</td><td>命令功能的深入讨论</td></tr><tr><td>EXAMPLES</td><td>怎样使用命令的例子</td></tr><tr><td>SEE ALSO</td><td>相关主题（通常是手册页）</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110210046022.png" alt="image-20220110210046022"></p><h3 id="help-获得shell内置命令的帮助信息"><a href="#help-获得shell内置命令的帮助信息" class="headerlink" title="help 获得shell内置命令的帮助信息"></a>help 获得shell内置命令的帮助信息</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#功能描述：获得shell内置命令的帮助信息help 命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>常用快捷键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl + c</td><td>停止进程</td></tr><tr><td>ctrl+l</td><td>清屏；彻底清屏是：reset</td></tr><tr><td>ctrl + q</td><td>退出</td></tr><tr><td>善于用tab键</td><td>提示(更重要的是可以防止敲错)</td></tr><tr><td>上下键</td><td>查找执行过的命令</td></tr><tr><td>ctrl +alt</td><td>linux和Windows之间切换</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110210300481.png" alt="image-20220110210300481"></p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th>常用快捷键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl + c</td><td>停止进程</td></tr><tr><td>ctrl+l</td><td>清屏；彻底清屏是：reset</td></tr><tr><td>ctrl + q</td><td>退出</td></tr><tr><td>善于用tab键</td><td>提示(更重要的是可以防止敲错)</td></tr><tr><td>上下键</td><td>查找执行过的命令</td></tr><tr><td>ctrl +alt</td><td>linux和Windows之间切换</td></tr></tbody></table><h2 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h2><h3 id="pwd-显示当前工作目录的绝对路径"><a href="#pwd-显示当前工作目录的绝对路径" class="headerlink" title="pwd 显示当前工作目录的绝对路径"></a>pwd 显示当前工作目录的绝对路径</h3><h3 id="ls-列出目录的内容"><a href="#ls-列出目录的内容" class="headerlink" title="ls 列出目录的内容"></a>ls 列出目录的内容</h3><pre class="line-numbers language-none"><code class="language-none">ls [选项] [目录或是文件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</td></tr><tr><td>-l</td><td>长数据串列出，包含文件的属性与权限等等数据；(常用)</td></tr></tbody></table><p>每行列出的信息依次是： 文件类型与权限 链接数 文件属主 文件属组 文件大小用byte来表示 建立或最近修改的时间 名字 </p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110205300473.png" alt="image-20220110205300473"></p><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h3><pre class="line-numbers language-none"><code class="language-none">cd  [参数]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>cd 绝对路径</td><td>切换路径</td></tr><tr><td>cd相对路径</td><td>切换路径</td></tr><tr><td>cd ~或者cd</td><td>回到自己的家目录</td></tr><tr><td>cd -</td><td>回到<strong>上一次</strong>所在目录</td></tr><tr><td>cd ..</td><td>回到当前目录的上一级目录</td></tr><tr><td>cd -P</td><td>跳转到实际物理路径，而非快捷方式路径</td></tr></tbody></table><h3 id="mkdir-创建一个新的目录"><a href="#mkdir-创建一个新的目录" class="headerlink" title="mkdir 创建一个新的目录"></a>mkdir 创建一个新的目录</h3><pre class="line-numbers language-none"><code class="language-none">mkdir [选项] 要创建的目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>创建多层目录</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110210422858.png" alt="image-20220110210422858"></p><h3 id="rmdir-删除一个空的目录"><a href="#rmdir-删除一个空的目录" class="headerlink" title="rmdir 删除一个空的目录"></a>rmdir 删除一个空的目录</h3><pre class="line-numbers language-none"><code class="language-none">rmdir 要删除的空目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110214722412.png" alt="image-20220110214722412"></p><h3 id="touch-创建空文件"><a href="#touch-创建空文件" class="headerlink" title="touch 创建空文件"></a>touch 创建空文件</h3><pre class="line-numbers language-none"><code class="language-none">touch 文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110214745465.png" alt="image-20220110214745465"></p><h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp 复制文件或目录"></a>cp 复制文件或目录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#功能描述：复制source文件到destcp [选项] source dest <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归复制整个文件夹</td></tr></tbody></table><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>source</td><td>源文件</td></tr><tr><td>dest</td><td>目标文件</td></tr></tbody></table><blockquote><p>🚩强制覆盖不提示的方法：\cp</p></blockquote><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110215217851.png" alt="image-20220110215217851"></p><h3 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm 移除文件或目录"></a>rm 移除文件或目录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#功能描述：递归删除目录中所有内容rm [选项] deleteFile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归删除目录中所有内容</td></tr><tr><td>-f</td><td>强制执行删除操作，而不提示用于进行确认。</td></tr><tr><td>-v</td><td>显示指令的详细执行过程</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110215324247.png" alt="image-20220110215324247"></p><h3 id="mv-移动文件与目录或重命名"><a href="#mv-移动文件与目录或重命名" class="headerlink" title="mv 移动文件与目录或重命名"></a>mv 移动文件与目录或重命名</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#功能描述：重命名:mv oldNameFile newNameFile功能描述：移动文件:mv &#x2F;temp&#x2F;movefile &#x2F;targetFolder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cat-查看文件内容"><a href="#cat-查看文件内容" class="headerlink" title="cat 查看文件内容"></a>cat 查看文件内容</h3><pre class="line-numbers language-none"><code class="language-none">cat  [选项] 要查看的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能描述</th></tr></thead><tbody><tr><td>-n</td><td>显示所有行的行号，包括空行。</td></tr></tbody></table><blockquote><p>一般查看比较小的文件，一屏幕能显示全的。</p><p><img src="C:/Users/clearsky0601/AppData/Roaming/Typora/typora-user-images/image-20220110213755115.png" alt="image-20220110213755115"></p></blockquote><h3 id="more-文件内容分屏查看器"><a href="#more-文件内容分屏查看器" class="headerlink" title="more 文件内容分屏查看器"></a>more 文件内容分屏查看器</h3><p>more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。</p><p>more指令中内置了若干快捷键，详见操作说明。</p><pre class="line-numbers language-none"><code class="language-none">more 要查看的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键 (space)</td><td>代表向下翻一页；</td></tr><tr><td>Enter</td><td>代表向下翻『一行』；</td></tr><tr><td>q</td><td>代表立刻离开 more ，不再显示该文件内容。</td></tr><tr><td>Ctrl+F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl+B</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110220002597.png" alt="image-20220110220002597"></p><h3 id="less-分屏显示文件内容"><a href="#less-分屏显示文件内容" class="headerlink" title="less 分屏显示文件内容"></a>less 分屏显示文件内容</h3><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><pre class="line-numbers language-none"><code class="language-none">less 要查看的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键</td><td>向下翻动一页；</td></tr><tr><td>[pagedown]</td><td>向下翻动一页</td></tr><tr><td>[pageup]</td><td>向上翻动一页；</td></tr><tr><td>/字串</td><td>向下搜寻『字串』的功能；n：向下查找；N：向上查找；</td></tr><tr><td>?字串</td><td>向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td></tr><tr><td>q</td><td>离开 less 这个程序；</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110220255031.png" alt="image-20220110220255031"></p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>echo输出内容到控制台</p><pre class="line-numbers language-none"><code class="language-none">echo [选项] [输出内容]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-e</td><td>支持反斜线控制的字符转换</td></tr></tbody></table><table><thead><tr><th>控制字符</th><th>作用</th></tr></thead><tbody><tr><td>\</td><td>输出\本身</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\t</td><td>制表符，也就是Tab键</td></tr></tbody></table><h3 id="head-显示文件头部内容"><a href="#head-显示文件头部内容" class="headerlink" title="head 显示文件头部内容"></a>head 显示文件头部内容</h3><p>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#功能描述：查看文件头10行内容head 文件      #功能描述：查看文件头5行内容，5可以是任意行数head -n 5 文件      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n&lt;行数&gt;</td><td>指定显示头部内容的行数</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110220621688.png" alt="image-20220110220621688"></p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110220824546.png" alt="image-20220110220824546"></p><h3 id="tail-输出文件尾部内容"><a href="#tail-输出文件尾部内容" class="headerlink" title="tail 输出文件尾部内容"></a>tail 输出文件尾部内容</h3><p>tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的前10行内容。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#功能描述：查看文件头10行内容tail  文件 #功能描述：查看文件头5行内容，5可以是任意行数tail  -n 5 文件 #功能描述：实时追踪该文档的所有更新tail  -f  文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n&lt;行数&gt;</td><td>输出文件尾部n行内容</td></tr><tr><td>-f</td><td>显示文件最新追加的内容，监视文件变化</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110221139721.png" alt="image-20220110221139721"></p><h3 id="gt-输出重定向和-gt-gt-追加"><a href="#gt-输出重定向和-gt-gt-追加" class="headerlink" title="&gt; 输出重定向和 &gt;&gt; 追加"></a>&gt; 输出重定向和 &gt;&gt; 追加</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ls -l &gt;文件      #（功能描述：列表的内容写入文件a.txt中（**覆盖写**））ls -al &gt;&gt;文件    #（功能描述：列表的内容**追加**到文件aa.txt的末尾）cat 文件1 &gt; 文件2  #（功能描述：将文件1的内容覆盖到文件2）echo “内容” &gt;&gt; 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110221433938.png" alt="image-20220110221433938"></p><h3 id="ln-软链接"><a href="#ln-软链接" class="headerlink" title="ln 软链接"></a>ln 软链接</h3><p>软链接也成为符号链接，类似于windows里的快捷方式，有自己的数据块，主要存放了链接其他文件的路径。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#功能描述：给原文件创建一个软链接ln -s [原文件或目录] [软链接名]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>删除软链接： rm -rf 软链接名，而不是rm -rf 软链接名/</p><p>查询：通过ll就可以查看，列表属性第1位是l，尾部会有位置指向。</p></blockquote><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110221637510.png" alt="image-20220110221637510" style="zoom:67%;" /><h3 id="history-查看已经执行过历史命令"><a href="#history-查看已经执行过历史命令" class="headerlink" title="history 查看已经执行过历史命令"></a>history 查看已经执行过历史命令</h3><h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><h3 id="date-显示当前时间"><a href="#date-显示当前时间" class="headerlink" title="date 显示当前时间"></a>date 显示当前时间</h3><p>（1）date                            （功能描述：显示当前时间）</p><p>（2）date +%Y                        （功能描述：显示当前年份）</p><p>（3）date +%m                        （功能描述：显示当前月份）</p><p>（4）date +%d                        （功能描述：显示当前是哪一天）</p><p>（5）date “+%Y-%m-%d %H:%M:%S”      （功能描述：显示年月日时分秒）</p><h3 id="date-显示非当前时间"><a href="#date-显示非当前时间" class="headerlink" title="date 显示非当前时间"></a>date 显示非当前时间</h3><p>（1）date -d ‘1 days ago’          （功能描述：显示前一天时间）</p><p>（2）date -d ‘-1 days ago’          （功能描述：显示明天时间）</p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110212713212.png" alt="image-20220110212713212"></p><h3 id="date-设置系统时间"><a href="#date-设置系统时间" class="headerlink" title="date 设置系统时间"></a>date 设置系统时间</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">date -s &quot;字符串时间&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110212439494.png" alt="image-20220110212439494"></p><h3 id="cal-查看日历"><a href="#cal-查看日历" class="headerlink" title="cal 查看日历"></a>cal 查看日历</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#功能描述：不加选项，显示本月日历cal [选项]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>具体某一年</td><td>显示这一年的日历</td></tr></tbody></table><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110211805751.png" alt="image-20220110211805751" style="zoom:50%;" /><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><p>useradd 添加新用户</p><p>passwd 设置用户密码</p><p>id 查看用户是否存在</p><p>cat /etc/passwd 查看创建了哪些用户</p><p>su 切换用户</p><p>userdel 删除用户</p><p>who 查看登录用户信息</p><p>sudo 设置普通用户具有root权限</p><p>usermod 修改用户</p><h2 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h2><h3 id="groupadd-新增组"><a href="#groupadd-新增组" class="headerlink" title="groupadd 新增组"></a>groupadd 新增组</h3><h3 id="groupdel-删除组"><a href="#groupdel-删除组" class="headerlink" title="groupdel 删除组"></a>groupdel 删除组</h3><h3 id="groupmod-修改组"><a href="#groupmod-修改组" class="headerlink" title="groupmod 修改组"></a>groupmod 修改组</h3><h3 id="cat-etc-group-查看创建了哪些组"><a href="#cat-etc-group-查看创建了哪些组" class="headerlink" title="cat /etc/group 查看创建了哪些组"></a>cat /etc/group 查看创建了哪些组</h3><h2 id="文件权限类"><a href="#文件权限类" class="headerlink" title="文件权限类"></a>文件权限类</h2><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><h2 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h2><h3 id="gzip-gunzip-压缩"><a href="#gzip-gunzip-压缩" class="headerlink" title="gzip/gunzip 压缩"></a>gzip/gunzip 压缩</h3><h3 id="zip-unzip-压缩"><a href="#zip-unzip-压缩" class="headerlink" title="zip/unzip 压缩"></a>zip/unzip 压缩</h3><h3 id="tar-打包"><a href="#tar-打包" class="headerlink" title="tar 打包"></a>tar 打包</h3><h2 id="磁盘分区类"><a href="#磁盘分区类" class="headerlink" title="磁盘分区类"></a>磁盘分区类</h2><h2 id="进程线程类"><a href="#进程线程类" class="headerlink" title="进程线程类"></a>进程线程类</h2><h2 id="crond-系统定时任务"><a href="#crond-系统定时任务" class="headerlink" title="crond 系统定时任务"></a>crond 系统定时任务</h2><p>‘</p><h1 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h1><h2 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h2><h3 id="RPM概述"><a href="#RPM概述" class="headerlink" title="RPM概述"></a>RPM概述</h3><p>RPM（RedHat Package Manager），RedHat软件包管理工具，类似windows里面的setup.exe 是Linux这系列操作系统里面的打包安装工具，它虽然是RedHat的标志，但理念是通用的。</p><p>RPM包的名称格式:</p><blockquote><p>Apache-1.3.23-11.i386.rpm</p><p>-    “apache” 软件名称</p><p>-    “1.3.23-11”软件的版本号，主版本和此版本</p><p>-    “i386”是软件所运行的硬件平台，Intel 32位微处理器的统称</p><p>-    “rpm”文件扩展名，代表RPM包</p></blockquote><h3 id="RPM查询命令（rpm-qa）"><a href="#RPM查询命令（rpm-qa）" class="headerlink" title="RPM查询命令（rpm -qa）"></a>RPM查询命令（rpm -qa）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#功能描述：查询所安装的所有rpm软件包rpm -qa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>🚩tips: 由于软件包比较多，一般都会采取过滤。rpm -qa | grep <u>rpm软件包</u></p><p>例如:</p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110194550746.png" alt="image-20220110194550746"></p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110194740413.png" alt="image-20220110194740413"></p><h3 id="RPM卸载命令（rpm-e）"><a href="#RPM卸载命令（rpm-e）" class="headerlink" title="RPM卸载命令（rpm -e）"></a>RPM卸载命令（rpm -e）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -e RPM软件包   rpm -e --nodeps 软件包  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>卸载软件包</td></tr><tr><td>–nodeps</td><td>卸载软件时，不检查依赖。   这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110200041491.png" alt="image-20220110200041491"></p><h3 id="RPM安装命令（rpm-ivh）"><a href="#RPM安装命令（rpm-ivh）" class="headerlink" title="RPM安装命令（rpm -ivh）"></a>RPM安装命令（rpm -ivh）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -ivh RPM包全名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-i</td><td>-i=install，安装</td></tr><tr><td>-v</td><td>-v=verbose，显示详细信息</td></tr><tr><td>-h</td><td>-h=hash，进度条</td></tr><tr><td>–nodeps</td><td>–nodeps，不检测依赖进度</td></tr></tbody></table><h2 id="YUM仓库配置"><a href="#YUM仓库配置" class="headerlink" title="YUM仓库配置"></a>YUM仓库配置</h2><h3 id="YUM概述"><a href="#YUM概述" class="headerlink" title="YUM概述"></a>YUM概述</h3><p>YUM（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shel<strong>l前端软件包管理器</strong>。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，<strong>可以自动处理依赖性关系</strong>，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110195433622.png" alt="image-20220110195433622" style="zoom: 33%;" /><h3 id="YUM的常用命令"><a href="#YUM的常用命令" class="headerlink" title="YUM的常用命令"></a>YUM的常用命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum [选项] [参数]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-y</td><td>对所有提问都回答“yes”</td></tr></tbody></table><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>install</td><td>安装rpm软件包</td></tr><tr><td>update</td><td>更新rpm软件包</td></tr><tr><td>check-update</td><td>检查是否有可用的更新rpm软件包</td></tr><tr><td>remove</td><td>删除指定的rpm软件包</td></tr><tr><td>list</td><td>显示软件包信息</td></tr><tr><td>clean</td><td>清理yum过期的缓存</td></tr><tr><td>deplist</td><td>显示yum软件包的所有依赖关系</td></tr></tbody></table><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110200203536.png" alt="image-20220110200203536"></p><h3 id="修改网络YUM源"><a href="#修改网络YUM源" class="headerlink" title="修改网络YUM源"></a>修改网络YUM源</h3><p>默认的系统YUM源，需要连接国外apache网站，网速比较慢，可以修改关联的网络YUM源为国内镜像的网站，比如网易163。</p><ol><li><p><strong>前期文件准备</strong></p><ul><li><p>前提条件linux系统必须可以联网</p></li><li><p>在Linux环境中访问该网络地址：<a href="http://mirrors.163.com/.help/centos.html%EF%BC%8C%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E4%B8%AD%E7%82%B9%E5%87%BBCentOS6-&gt;%E5%86%8D%E7%82%B9%E5%87%BB%E4%BF%9D%E5%AD%98">http://mirrors.163.com/.help/centos.html，在使用说明中点击CentOS6-&gt;再点击保存</a><br><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110200853463.png" alt="image-20220110200853463"></p></li><li><p>将文件传至指定位置文件保存的位置<br><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110200825397.png" alt="image-20220110200825397"><br><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110201040800.png" alt="image-20220110201040800"></p></li></ul></li><li><p><strong>替换本地yum文件</strong></p><ul><li><p>把下载的文件移动到/etc/yum.repos.d/目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mv CentOS7-Base-163.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110202129083.png" alt="image-20220110202129083"></p></li><li><p>进入到/etc/yum.repos.d/目录</p></li><li><p>用CentOS7-Base-163.repo替换CentOS-Base.repo</p></li></ul></li><li><p><strong>安装命令</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum clean allyum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>yum makecache就是把服务器的包信息下载到本地电脑缓存起来</p></li><li><p><strong>测试</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum list | grep firefoxyum -y install firefox.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110203411379.png" alt="image-20220110203411379"></p></li></ol><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>Problem:</p><p>查看防火墙状态出现:Unit iptables.service could not be found. 无法找到服务器.</p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110184637768.png" alt="image-20220110184637768"></p><p>solution:</p><p><a href="https://blog.csdn.net/y368769/article/details/104490697">https://blog.csdn.net/y368769/article/details/104490697</a></p><p><img src="https://gitee.com/clearsky0601/picdemo01/raw/master/img/image-20220110185122435.png" alt="image-20220110185122435"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux入门&quot;&gt;&lt;a href=&quot;#Linux入门&quot; class=&quot;headerlink&quot; title=&quot;Linux入门&quot;&gt;&lt;/a&gt;Linux入门&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    <category term="教程笔记" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
</feed>
